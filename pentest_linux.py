import nmap
import logging
import json
import os
import subprocess
import socket
import threading
import bcrypt
import sys
from datetime import datetime
from getpass import getpass
from rich.console import Console
from rich.table import Table
from rich.progress import Progress

# Linux-specific configurations
LINUX_SCAN_PATHS = {
    'nmap': '/usr/bin/nmap',
    'nikto': '/usr/bin/nikto',
    'hydra': '/usr/bin/hydra'
}

# Initialize rich console
console = Console()

# Configure logging
logging.basicConfig(
    filename='pentest_framework.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filemode='a'
)
logger = logging.getLogger()

class LinuxPentestFramework:
    def __init__(self):
        self.check_linux_dependencies()
        self.check_privileges()
        self.auth = Authenticator()
        self.scanner = AdvancedNetworkScanner()
        self.ui = PentestUI()
        self.reports = []

    def check_linux_dependencies(self):
        missing = []
        for tool, path in LINUX_SCAN_PATHS.items():
            if not os.path.exists(path):
                missing.append(tool)
        if missing:
            console.print(f"\n[bold red]Missing required tools: {', '.join(missing)}[/bold red]")
            console.print("Run 'sudo apt-get install nmap nikto hydra'")
            sys.exit(1)

    def check_privileges(self):
        if os.geteuid() != 0:
            console.print("\n[bold yellow]Warning: Some features require root privileges![/bold yellow]")
            console.print("Consider running with 'sudo' for full functionality\n")

    # ... (keep previous class methods from the advanced version)

    def view_reports(self):
        report_files = [f for f in os.listdir('reports') if f.endswith('.html')]
        if not report_files:
            console.print("[bold yellow]No reports found![/bold yellow]")
            return
            
        table = Table(title="Available Reports")
        table.add_column("ID", style="cyan")
        table.add_column("Report Name")
        
        for idx, file in enumerate(report_files, 1):
            table.add_row(str(idx), file)
            
        console.print(table)
        choice = input("Select report to view (or 'q' to quit): ")
        
        if choice != 'q' and choice.isdigit():
            os.system(f"xdg-open reports/{report_files[int(choice)-1]} 2>/dev/null")

    def linux_service_scan(self, target):
        """Specialized scan for common Linux services"""
        try:
            console.print(f"\n[bold]Scanning Linux services on {target}[/bold]")
            result = subprocess.run(
                [LINUX_SCAN_PATHS['nmap'], '-sV', '-T4', '-p22,80,443,3306,5432', target],
                capture_output=True,
                text=True
            )
            console.print(f"\n{result.stdout}")
            self.log_scan_result('linux_service_scan', target, result.stdout)
        except Exception as e:
            logger.error(f"Linux service scan failed: {str(e)}")

    def log_scan_result(self, scan_type, target, results):
        log_dir = f"scans/{datetime.now().strftime('%Y-%m-%d')}"
        os.makedirs(log_dir, exist_ok=True)
        filename = f"{log_dir}/{scan_type}_{target.replace('/', '_')}.log"
        with open(filename, 'w') as f:
            f.write(results)

if __name__ == "__main__":
    try:
        framework = LinuxPentestFramework()
        framework.run()
    except KeyboardInterrupt:
        console.print("\n[bold red]Operation cancelled by user![/bold red]")
    except Exception as e:
        logger.error(f"Critical error: {str(e)}")
        console.print(f"[bold red]Critical error: {str(e)}[/bold red]")
