import nmap
import logging
import json
import os
import subprocess

# Initialize logging
logging.basicConfig(filename='pentest_framework.log', level=logging.INFO)

# Load configuration from config.json
try:
    with open('config.json', 'r') as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    logging.error("Config file not found. Please create a 'config.json' file.")
    exit(1)

# Initialize Nmap Scanner
nm = nmap.PortScanner()

# Function to scan domain using domain name
def domain_scan(target):
    try:
        logging.info(f"Starting domain scan on {target}")
        # Running nmap command directly via subprocess for domain scan
        result = subprocess.run(['nmap', target], capture_output=True, text=True)
        
        # Check for errors in the scan
        if result.returncode != 0:
            print(f"Error during scan: {result.stderr}")
            logging.error(f"Error scanning {target}: {result.stderr}")
            return None

        # Process the output
        scan_output = result.stdout
        open_ports = []
        
        # Parsing the output to find open ports
        for line in scan_output.splitlines():
            if "open" in line:
                parts = line.split()
                open_ports.append(parts[0])

        report = {
            "target": target,
            "open_ports": open_ports
        }
        
        # Print results
        print(f"\nNmap scan report for {target}")
        print(scan_output)
        
        # Save report
        save_report(report, "domain")

        return report
    except Exception as e:
        logging.error(f"Error during domain scan: {e}")
        print(f"Error scanning {target}: {e}")
        return None

# Function to scan network for live hosts, optionally perform port scanning and OS detection
def network_scan(network_range, scan_ports, port_range, os_detection):
    try:
        logging.info(f"Starting network scan on {network_range}")
        
        # Set arguments based on user choices
        arguments = ""
        if scan_ports:
            # Add port range to scan
            if port_range:
                arguments += f"-p {port_range} "
            else:
                arguments += "-p- "  # Default to scanning all ports
        if os_detection:
            arguments += "-O "  # Enable OS detection
        
        nm.scan(hosts=network_range, arguments=arguments)
        
        report = {
            "network": network_range,
            "hosts": []
        }
        
        for host in nm.all_hosts():
            if nm[host].state() == "up":
                # Collect host info
                host_info = {
                    "host": host,
                    "ports": [],
                    "os": "Unknown"
                }
                
                # Get open ports if port scanning is enabled
                if scan_ports:
                    for proto in nm[host].all_protocols():
                        lport = nm[host][proto].keys()
                        for port in lport:
                            state = nm[host][proto][port]['state']
                            host_info["ports"].append({
                                "port": port,
                                "state": state
                            })
                
                # Get OS detection info if enabled
                if os_detection and 'osclass' in nm[host]:
                    os_info = nm[host]['osclass'][0]
                    host_info["os"] = os_info['osfamily'] + " " + os_info['osgen']

                # Append host info to report
                report["hosts"].append(host_info)
                
                # Print results
                print(f"\nHost: {host}")
                if scan_ports:
                    print(f"Open Ports: {host_info['ports']}")
                if os_detection:
                    print(f"Detected OS: {host_info['os']}")
        
        # Save network scan report
        save_report(report, "network")

        return report
    except Exception as e:
        logging.error(f"Error during network scan: {e}")
        print(f"Error scanning network: {e}")
        return None

# Function to save reports to a TXT file instead of JSON
def save_report(report_data, report_type):
    output_file = config[f"{report_type}_output_file"]
    
    # Ensure the file path exists
    try:
        output_dir = os.path.dirname(output_file)
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # Save to TXT file
        with open(output_file, 'w') as report_file:
            if report_type == "domain":
                report_file.write(f"Domain Scan Report for {report_data['target']}\n")
                report_file.write(f"Open Ports: {', '.join(report_data['open_ports']) if report_data['open_ports'] else 'None'}\n")
            elif report_type == "network":
                report_file.write(f"Network Scan Report for {report_data['network']}\n")
                for host in report_data['hosts']:
                    report_file.write(f"\nHost: {host['host']}\n")
                    if host['ports']:
                        report_file.write("Open Ports:\n")
                        for port in host['ports']:
                            report_file.write(f"  Port: {port['port']}, State: {port['state']}\n")
                    if host['os'] != "Unknown":
                        report_file.write(f"Detected OS: {host['os']}\n")
            logging.info(f"Report saved to {output_file}")
    except Exception as e:
        logging.error(f"Error saving report: {e}")
        print(f"Error saving report: {e}")


# Function to view saved reports
def view_reports():
    print("\nSaved Reports:")
    for report_type in ['domain', 'network']:
        output_file = config[f"{report_type}_output_file"]
        if os.path.exists(output_file):
            with open(output_file, 'r') as report_file:
                report_data = json.load(report_file)
                print(f"\n{report_type.capitalize()} Report:")
                print(json.dumps(report_data, indent=4))
        else:
            print(f"\nNo {report_type} report found.")

# Function to handle user input and actions
def display_ui():
    print("\nPenetration Testing Framework")
    print("1. Scan Domain")
    print("2. Scan Network")
    print("3. View Reports")
    print("4. Exit")

# Function to authenticate the user (basic login simulation)
def authenticate_user():
    users_db = {"admin": "admin123", "user": "user123"}
    username = input("Enter username: ")
    password = input("Enter password: ")

    if username in users_db and users_db[username] == password:
        return username
    else:
        logging.warning(f"Failed login attempt for {username}")
        return None

def main():
    # Authenticate the user
    username = authenticate_user()
    
    if username:
        print(f"\nWelcome {username}!")
        while True:
            display_ui()
            choice = input("Enter choice: ")

            if choice == "1":
                # Scan Domain
                domain = input("Enter domain to scan (e.g., example.com): ")
                domain_scan(domain)
            elif choice == "2":
                # Scan Network
                network_range = input("Enter network range (e.g., 192.168.1.0/24): ")
                
                # Ask user if they want port scanning and OS detection
                scan_ports = input("Do you want to scan ports? (yes/no): ").strip().lower() == 'yes'
                port_range = None
                if scan_ports:
                    port_range = input("Enter port range (e.g., 1-1000) or press Enter for all ports: ").strip()
                
                os_detection = input("Do you want OS detection? (yes/no): ").strip().lower() == 'yes'
                
                network_scan(network_range, scan_ports, port_range, os_detection)
            elif choice == "3":
                # View Reports
                view_reports()
            elif choice == "4":
                # Exit
                print("Exiting PenTest Framework.")
                break
            else:
                print("Invalid choice. Please try again.")
    else:
        print("Authentication failed. Exiting program.")

if __name__ == "__main__":
    main()
